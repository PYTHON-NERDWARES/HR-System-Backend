# Generated by Django 3.1.7 on 2022-01-04 14:42

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('employee_id', models.CharField(blank=True, default=20220104, max_length=255, null=True)),
                ('role', models.CharField(blank=True, choices=[('HR', 'HR'), ('Branch Manager', 'Branch Manager'), ('Department Manager', 'Department Manager'), ('Software Engineer', 'Software Engineer'), ('Senior Software Engineer', 'Senior Software Engineer'), ('Full Stack Developer', 'Senior Software Engineer'), ('FrontEnd Developer', 'FrontEnd Developer'), ('BackEnd Developer', 'BackEnd Developer'), ('Python Developer', 'Python Developer'), ('UX Designer', 'UX Designer'), ('UI Designer', 'UI Designer'), ('DOTnet Developer', 'DOTnet Developer'), ('Java Developer', 'Java Developer'), ('Android Developer', 'Android Developer'), ('Mobile Developer', 'Mobile Developer'), ('Project Development Manager', 'Project Development Manager'), ('Chief Operating Officer', 'Chief Operating Officer'), ('Digital Marketing', 'Digital Marketing'), ('Marketing Officer', 'Marketing Officer'), ('Databace Administrator', 'Databace Administrator'), ('Quality Assurance', 'Quality Assurance'), ('Junior Frontend Developer', 'Junior Frontend Developer'), ('Trainee', 'Trainee')], default='HR', max_length=50, null=True)),
                ('work_type', models.CharField(blank=True, choices=[('On Site', 'On Site'), ('Remote', 'Remote')], max_length=50, null=True)),
                ('experience', models.IntegerField(blank=True, default=1, null=True)),
                ('salary', models.FloatField(blank=True, default='50000', null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female')], max_length=10, null=True)),
                ('nationality', models.CharField(blank=True, choices=[('Afghan', 'Afghan'), ('Albanian', 'Albanian'), ('Algerian', 'Algerian'), ('Argentinian', 'Argentinian'), ('Australian', 'Australian'), ('Bangladeshi', 'Bangladeshi'), ('Belgian', 'Belgian'), ('Bolivian', 'Bolivian'), ('Batswana', 'Batswana'), ('Brazilian', 'Brazilian'), ('Bulgarian', 'Bulgarian'), ('Cambodian', 'Cambodian'), ('Cameroonian', 'Cameroonian'), ('Canadian', 'Canadian'), ('Chilean', 'Chilean'), ('Chinese', 'Chinese'), ('Colombian', 'Colombian'), ('Costa Rican', 'Costa Rican'), ('Croatian', 'Croatian'), ('Cuban', 'Cuban'), ('Czech', 'Czech'), ('Danish', 'Danish'), ('Dominican', 'Dominican'), ('Ecuadorian', 'Ecuadorian'), ('Egyptian', 'Egyptian'), ('Salvadorian', 'Salvadorian'), ('English', 'English'), ('Estonian', 'Estonian'), ('Ethiopian', 'Ethiopian'), ('Fijian', 'Fijian'), ('Finnish', 'Finnish'), ('French', 'French'), ('German', 'German'), ('Ghanaian', 'Ghanaian'), ('Greek', 'Greek'), ('Guatemalan', 'Guatemalan'), ('Haitian', 'Haitian'), ('Honduran', 'Honduran'), ('Hungarian', 'Hungarian'), ('Icelandic', 'Icelandic'), ('Indian', 'Indian'), ('Indonesian', 'Indonesian'), ('Iranian', 'Iranian'), ('Iraqi', 'Iraqi'), ('Irish', 'Irish'), ('Italian', 'Italian'), ('Jamaican', 'Jamaican'), ('Japanese', 'Japanese'), ('Jordanian', 'Jordanian'), ('Kenyan', 'Kenyan'), ('Kuwaiti', 'Kuwaiti'), ('Lao', 'Lao'), ('Latvian', 'Latvian'), ('Lebanese', 'Lebanese'), ('Libyan', 'Libyan'), ('Lithuanian', 'Lithuanian'), ('Malagasy', 'Malagasy'), ('Malaysian', 'Malaysian'), ('Malian', 'Malian'), ('Maltese', 'Maltese'), ('Mexican', 'Mexican'), ('Mongolian', 'Mongolian'), ('Moroccan', 'Moroccan'), ('Mozambican', 'Mozambican'), ('Namibian', 'Namibian'), ('Nepalese', 'Nepalese'), ('Dutch', 'Dutch'), ('New Zealand', 'New Zealand'), ('Nicaraguan', 'Nicaraguan'), ('Nigerian', 'Nigerian'), ('Norwegian', 'Norwegian'), ('Pakistani', 'Pakistani'), ('Panamanian', 'Panamanian'), ('Paraguayan', 'Paraguayan'), ('Peruvian', 'Peruvian'), ('Philippine', 'Philippine'), ('Polish', 'Polish'), ('Portuguese', 'Portuguese'), ('Romanian', 'Romanian'), ('Russian', 'Russian'), ('Saudi', 'Saudi'), ('Scottish', 'Scottish'), ('Senegalese', 'Senegalese'), ('Serbian', 'Serbian'), ('Singaporean', 'Singaporean'), ('Slovak', 'Slovak'), ('South African', 'South African'), ('Korean', 'Korean'), ('Spanish', 'Spanish'), ('Sri Lankan', 'Sri Lankan'), ('Sudanese', 'Sudanese'), ('Swedish', 'Swedish'), ('Swiss', 'Swiss'), ('Syrian', 'Syrian'), ('Taiwanese', 'Taiwanese'), ('Tajikistani', 'Tajikistani'), ('Thai', 'Thai'), ('Tongan', 'Tongan'), ('Tunisian', 'Tunisian'), ('Turkish', 'Turkish'), ('Ukrainian', 'Ukrainian'), ('Emirati', 'Emirati'), ('British', 'British'), ('American', 'American'), ('Uruguayan', 'Uruguayan'), ('Venezuelan', 'Venezuelan'), ('Vietnamese', 'Vietnamese'), ('Welsh', 'Welsh'), ('Zambian', 'Zambian'), ('Zimbabwean', 'Zimbabwean')], max_length=50, null=True)),
                ('marital_status', models.CharField(blank=True, choices=[('Single', 'Single'), ('Married', 'Married')], max_length=50, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('Personal_Picture', models.URLField(blank=True, max_length=1000, null=True)),
                ('annual_off_days', models.IntegerField(blank=True, default=12, null=True)),
                ('days_taken', models.IntegerField(blank=True, default=0, null=True)),
                ('days_remaining', models.IntegerField(blank=True, default=0, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('history', models.TextField(blank=True, default='No History', max_length=1000, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('turnover', models.IntegerField(default=5)),
                ('branch_manager', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Leave',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('branch_name', models.CharField(blank=True, max_length=255, null=True)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('request_status', models.CharField(default='Pending', max_length=50)),
                ('hours', models.IntegerField(default=0)),
                ('name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('history', models.TextField(blank=True, default='No History', max_length=1000, null=True)),
                ('department_manager', models.CharField(default='', max_length=50)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.branch')),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='branch',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.branch'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.department'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
